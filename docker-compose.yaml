version: "3.9"
services:
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    networks:
      - app_network

  kafka:
    image: "bitnami/kafka:latest"
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami/kafka/data"

  zookeeper:
    image: "bitnami/zookeeper:latest"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami/zookeeper/data"
  
  akhq: # Kafka UI tool
    image: "tchiotludo/akhq:latest"
    depends_on:
      - kafka
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - "8080:8080"

  postgres:
    image: "postgres:latest"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: example_db
    ports:
      - "5432:5432"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    networks:
      - app_network

  mongodb:
    image: "mongo:latest"
    ports:
      - "27017:27017"
    volumes:
      - "mongo_data:/data/db"
    networks:
      - app_network

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/data"
    networks:
      - app_network

  localstack:
    image: "localstack/localstack:latest"
    environment:
      DEFAULT_REGION: ap-southeast-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      DATA_DIR: /tmp/localstack/data
    ports:
      - "4566:4566"
    volumes:
      - "localstack_data:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  adminer: # Multi-database UI tool
    image: "adminer:latest"
    ports:
      - "8082:8080"
    networks:
      - app_network

volumes:
  kafka_data:
  zookeeper_data:
  localstack_data:
  postgres_data:
  mongo_data:
  redis_data:
  rabbitmq_data:

networks:
  app_network: